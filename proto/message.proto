syntax="proto3";
package pb;

//message id
enum ID {
    MSG_BEGIN = 0;

    MSG_Connect     = 1;    //connect(first message from client side)
    MSG_Heartbeat   = 2;    //heart beat(one hb packet per second from server side)

    MSG_JoinRoom    = 10;   //join
    MSG_Progress    = 20;   //progress
    MSG_Ready       = 30;   //ready
    MSG_Start       = 40;   //start
    MSG_Frame       = 50;   //frame data
    MSG_Input       = 60;   //input
    MSG_Result      = 70;   //result

    MSG_Close      = 100;   //room closed

    MSG_END = 255;
}

//错误码
enum ERROR_CODE {
    ERR_Ok          = 0;    //OK
    ERR_NoPlayer    = 1;    //no such player
    ERR_NoRoom      = 2;    //no such room
    ERR_RoomState   = 3;    //room state incorrect
    ERR_Token       = 4;    //token verify failed
}

//connect message, first message from client side
message C2S_ConnectMsg  {
    uint64 playerID        = 1;    //player id
    uint64 battleID        = 2;    //battle id
	string token           = 10;   //token
}

//connect message from server side (S2C)
message S2C_ConnectMsg  {
	ERROR_CODE errorCode    = 1;
}

//join room message (S2C)
message S2C_JoinRoomMsg  {
	int32 roomSeatId       = 1;   //room seat id(1~N)
	repeated uint64 others = 2;   //others
	repeated int32 pros    = 3;   //others progress
	int32 randomSeed       = 4;   //random sand
}

//game start message (S2C)
message S2C_StartMsg  {
	int64 timeStamp        = 1;
}

//read progress (C2S)
message C2S_ProgressMsg  {
	int32 pro              = 1;   //progress(0~100)
}

//read progress (S2C)
message S2C_ProgressMsg  {
	uint64 id              = 1;   //id
	int32 pro              = 2;   //progress(0~100)
}

//client input message (C2S)
message C2S_InputMsg  {
    int32 sid              = 1;    //opt id
    int32 x                = 2;    //x pos
    int32 y                = 3;    //y pos
    uint32 frameID         = 4;    //frame id
}

//frame input data
message InputData {
    uint64 id              = 1;    //id
    int32 sid              = 2;    //opt id
    int32 x                = 3;    //x pos
    int32 y                = 4;    //y pos
    int32 roomSeatId       = 5;    //room seat id(1~N)
}

//frame data
message FrameData {
    uint32 frameID          = 1;   //frame id
    repeated InputData input         = 2;   //input data
}

//cast frame data (S2C)
message S2C_FrameMsg {
    repeated FrameData frames        = 1;   //frame count
}

//result (C2S)
message C2S_ResultMsg {
    uint64 winnerID          = 1; //winner id
}

